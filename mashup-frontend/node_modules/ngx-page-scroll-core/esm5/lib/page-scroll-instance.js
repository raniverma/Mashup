/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An Interface specifying the possible options to be passed into the newInstance() factory method
 * @record
 */
export function PageScrollOptions() { }
if (false) {
    /**
     * The document object of the current app
     * @type {?}
     */
    PageScrollOptions.prototype.document;
    /**
     * A specification of the DOM element to scroll to. Either a string referring to an
     * element using a valid css selector (`#target`, `.class`, `div.class`) or a HTMLElement
     * that is attached to the document's DOM tree.
     * @type {?}
     */
    PageScrollOptions.prototype.scrollTarget;
    /**
     * Array of HTMLElements or the body object that should be manipulated while performing
     * the scroll animation.
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.scrollViews;
    /**
     * Maximum speed to be used for the scroll animation. Only taken
     * into account of no duration is provided
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.speed;
    /**
     * A listener to be called whenever the scroll animation stops
     * @type {?|undefined}
     */
    PageScrollOptions.prototype.scrollFinishListener;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.namespace;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.verticalScrolling;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.duration;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.scrollOffset;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.advancedInlineOffsetCalculation;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptEvents;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptKeys;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.interruptible;
    /** @type {?|undefined} */
    PageScrollOptions.prototype.easingLogic;
}
/**
 * Represents a scrolling action
 */
var /**
 * Represents a scrolling action
 */
PageScrollInstance = /** @class */ (function () {
    /**
     * Private constructor, requires the properties assumed to be the bare minimum.
     * Use the factory methods to create instances:
     *      {@link PageScrollService#create}
     */
    function PageScrollInstance(pageScrollOptions) {
        /**
         * These properties will be set/manipulated if the scroll animation starts
         */
        /* The initial value of the scrollTop or scrollLeft position when the animation starts */
        this.startScrollPosition = 0;
        /* Whether an interrupt listener is attached to the body or not */
        this.interruptListenersAttached = false;
        /* References to the timer instance that is used to perform the scroll animation to be
           able to clear it on animation end*/
        this.timer = null;
        if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {
            pageScrollOptions.scrollViews = [
                pageScrollOptions.document.documentElement,
                pageScrollOptions.document.body,
                pageScrollOptions.document.body.parentNode,
            ];
            this.isInlineScrolling = false;
        }
        else {
            this.isInlineScrolling = true;
        }
        this.pageScrollOptions = pageScrollOptions;
    }
    /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    PageScrollInstance.getScrollingTargetPosition = /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    function (pageScrollOptions, scrollTargetElement) {
        /** @type {?} */
        var body = pageScrollOptions.document.body;
        /** @type {?} */
        var docEl = pageScrollOptions.document.documentElement;
        /** @type {?} */
        var windowPageYOffset = pageScrollOptions.document.defaultView &&
            pageScrollOptions.document.defaultView.pageYOffset || undefined;
        /** @type {?} */
        var windowPageXOffset = pageScrollOptions.document.defaultView &&
            pageScrollOptions.document.defaultView.pageXOffset || undefined;
        /** @type {?} */
        var scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;
        /** @type {?} */
        var scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;
        /** @type {?} */
        var clientTop = docEl.clientTop || body.clientTop || 0;
        /** @type {?} */
        var clientLeft = docEl.clientLeft || body.clientLeft || 0;
        if (scrollTargetElement === undefined || scrollTargetElement === null) {
            // No element found, so return the current position to not cause any change in scroll position
            return { top: scrollTop, left: scrollLeft };
        }
        /** @type {?} */
        var box = scrollTargetElement.getBoundingClientRect();
        /** @type {?} */
        var top = box.top + scrollTop - clientTop;
        /** @type {?} */
        var left = box.left + scrollLeft - clientLeft;
        return { top: Math.round(top), left: Math.round(left) };
    };
    /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    PageScrollInstance.getInlineScrollingTargetPosition = /**
     * @private
     * @param {?} pageScrollOptions
     * @param {?} scrollTargetElement
     * @return {?}
     */
    function (pageScrollOptions, scrollTargetElement) {
        /** @type {?} */
        var position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };
        if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {
            /** @type {?} */
            var accumulatedParentsPos = { top: 0, left: 0 };
            // not named window to make sure we're not getting the global window variable by accident
            /** @type {?} */
            var theWindow = scrollTargetElement.ownerDocument.defaultView;
            /** @type {?} */
            var parentFound = false;
            // Start parent is the immediate parent
            /** @type {?} */
            var parent_1 = scrollTargetElement.parentElement;
            // Iterate upwards all parents
            while (!parentFound && parent_1 !== undefined && parent_1 !== null) {
                if (theWindow.getComputedStyle(parent_1).getPropertyValue('position') === 'relative') {
                    accumulatedParentsPos.top += parent_1.offsetTop;
                    accumulatedParentsPos.left += parent_1.offsetLeft;
                }
                // Next iteration
                parent_1 = parent_1.parentElement;
                parentFound = parent_1 === pageScrollOptions.scrollViews[0];
            }
            if (parentFound) {
                // Only use the results if we found the parent, otherwise we accumulated too much anyway
                position.top += accumulatedParentsPos.top;
                position.left += accumulatedParentsPos.left;
            }
            else {
                /* TODO Uncomment
                if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {
                  console.warn('Unable to find nested scrolling targets parent!');
                }*/
            }
        }
        return position;
    };
    /**
     * @param {?} scrollingView
     * @return {?}
     */
    PageScrollInstance.prototype.getScrollPropertyValue = /**
     * @param {?} scrollingView
     * @return {?}
     */
    function (scrollingView) {
        if (!this.pageScrollOptions.verticalScrolling) {
            return scrollingView.scrollLeft;
        }
        return scrollingView.scrollTop;
    };
    /**
     * Extract the exact location of the scrollTarget element.
     *
     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
     * a string like "#heading2", then this method returns the corresponding DOM element for that id.
     *
     */
    /**
     * Extract the exact location of the scrollTarget element.
     *
     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
     * a string like "#heading2", then this method returns the corresponding DOM element for that id.
     *
     * @return {?}
     */
    PageScrollInstance.prototype.extractScrollTargetPosition = /**
     * Extract the exact location of the scrollTarget element.
     *
     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be
     * a string like "#heading2", then this method returns the corresponding DOM element for that id.
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scrollTargetElement = this.getScrollTargetElement();
        if (scrollTargetElement === null || scrollTargetElement === undefined) {
            // Scroll target not found
            return { top: NaN, left: NaN };
        }
        if (this.isInlineScrolling) {
            return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
        }
        return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);
    };
    /**
     * Get the top offset of the scroll animation.
     * This automatically takes the offset location of the scrolling container/scrolling view
     * into account (for nested/inline scrolling).
     */
    /**
     * Get the top offset of the scroll animation.
     * This automatically takes the offset location of the scrolling container/scrolling view
     * into account (for nested/inline scrolling).
     * @return {?}
     */
    PageScrollInstance.prototype.getCurrentOffset = /**
     * Get the top offset of the scroll animation.
     * This automatically takes the offset location of the scrolling container/scrolling view
     * into account (for nested/inline scrolling).
     * @return {?}
     */
    function () {
        return this.pageScrollOptions.scrollOffset;
    };
    /**
     * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
     * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
     *          false if it failed for all ScrollViews, meaning that we should stop the animation
     *          (probably because we're at the end of the scrolling region)
     */
    /**
     * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
     * @param {?} position
     * @return {?} true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
     *          false if it failed for all ScrollViews, meaning that we should stop the animation
     *          (probably because we're at the end of the scrolling region)
     */
    PageScrollInstance.prototype.setScrollPosition = /**
     * Sets the "scrollTop" or "scrollLeft" property for all scrollViews to the provided value
     * @param {?} position
     * @return {?} true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.
     *          false if it failed for all ScrollViews, meaning that we should stop the animation
     *          (probably because we're at the end of the scrolling region)
     */
    function (position) {
        var _this = this;
        // Set the new scrollTop/scrollLeft to all scrollViews elements
        return this.pageScrollOptions.scrollViews.reduce((/**
         * @param {?} oneAlreadyWorked
         * @param {?} scrollingView
         * @return {?}
         */
        function (oneAlreadyWorked, scrollingView) {
            /** @type {?} */
            var startScrollPropertyValue = _this.getScrollPropertyValue(scrollingView);
            if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {
                /** @type {?} */
                var scrollDistance = Math.abs(startScrollPropertyValue - position);
                // The movement we need to perform is less than 2px
                // This we consider a small movement which some browser may not perform when
                // changing the scrollTop/scrollLeft property
                // Thus in this cases we do not stop the scroll animation, although setting the
                // scrollTop/scrollLeft value "fails"
                /** @type {?} */
                var isSmallMovement = scrollDistance < _this.pageScrollOptions._minScrollDistance;
                if (!_this.pageScrollOptions.verticalScrolling) {
                    scrollingView.scrollLeft = position;
                }
                else {
                    scrollingView.scrollTop = position;
                }
                // Return true if setting the new scrollTop/scrollLeft value worked
                // We consider that it worked if the new scrollTop/scrollLeft value is closer to the
                // desired scrollTop/scrollLeft than before (it might not be exactly the value we
                // set due to dpi or rounding irregularities)
                if (isSmallMovement || scrollDistance > Math.abs(_this.getScrollPropertyValue(scrollingView) - position)) {
                    return true;
                }
            }
            return oneAlreadyWorked;
        }), false);
    };
    /**
     * Trigger firing a animation finish event
     * @param value Whether the animation finished at the target (true) or got interrupted (false)
     */
    /**
     * Trigger firing a animation finish event
     * @param {?} value Whether the animation finished at the target (true) or got interrupted (false)
     * @return {?}
     */
    PageScrollInstance.prototype.fireEvent = /**
     * Trigger firing a animation finish event
     * @param {?} value Whether the animation finished at the target (true) or got interrupted (false)
     * @return {?}
     */
    function (value) {
        if (this.pageScrollOptions.scrollFinishListener) {
            this.pageScrollOptions.scrollFinishListener.emit(value);
        }
    };
    /**
     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
     * will be called if any of the attached events is fired.
     *
     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
     */
    /**
     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
     * will be called if any of the attached events is fired.
     *
     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
     * @param {?} interruptReporter
     * @return {?}
     */
    PageScrollInstance.prototype.attachInterruptListeners = /**
     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter
     * will be called if any of the attached events is fired.
     *
     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.
     * @param {?} interruptReporter
     * @return {?}
     */
    function (interruptReporter) {
        var _this = this;
        if (this.interruptListenersAttached) {
            // Detach possibly existing listeners first
            this.detachInterruptListeners();
        }
        this.interruptListener = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            interruptReporter.report(event, _this);
        });
        this.pageScrollOptions.interruptEvents.forEach((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.pageScrollOptions.document.body.addEventListener(event, _this.interruptListener); }));
        this.interruptListenersAttached = true;
    };
    /**
     * Remove event listeners from the body and stop listening for events that might be treated as "animation
     * interrupt" events.
     */
    /**
     * Remove event listeners from the body and stop listening for events that might be treated as "animation
     * interrupt" events.
     * @return {?}
     */
    PageScrollInstance.prototype.detachInterruptListeners = /**
     * Remove event listeners from the body and stop listening for events that might be treated as "animation
     * interrupt" events.
     * @return {?}
     */
    function () {
        var _this = this;
        this.pageScrollOptions.interruptEvents.forEach((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.pageScrollOptions.document.body.removeEventListener(event, _this.interruptListener); }));
        this.interruptListenersAttached = false;
    };
    /**
     * @private
     * @return {?}
     */
    PageScrollInstance.prototype.getScrollTargetElement = /**
     * @private
     * @return {?}
     */
    function () {
        if (typeof this.pageScrollOptions.scrollTarget === 'string') {
            /** @type {?} */
            var targetSelector = (/** @type {?} */ (this.pageScrollOptions.scrollTarget));
            if (targetSelector.match(/^#[^\s]+$/g) !== null) {
                // It's an id selector and a valid id, as it does not contain any white space characters
                return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));
            }
            return (/** @type {?} */ (this.pageScrollOptions.document.querySelector(targetSelector)));
        }
        return (/** @type {?} */ (this.pageScrollOptions.scrollTarget));
    };
    return PageScrollInstance;
}());
/**
 * Represents a scrolling action
 */
export { PageScrollInstance };
if (false) {
    /** @type {?} */
    PageScrollInstance.prototype.pageScrollOptions;
    /**
     * @type {?}
     * @private
     */
    PageScrollInstance.prototype.isInlineScrolling;
    /**
     * @type {?}
     * @private
     */
    PageScrollInstance.prototype.interruptListener;
    /**
     * These properties will be set/manipulated if the scroll animation starts
     * @type {?}
     */
    PageScrollInstance.prototype.startScrollPosition;
    /** @type {?} */
    PageScrollInstance.prototype.targetScrollPosition;
    /** @type {?} */
    PageScrollInstance.prototype.distanceToScroll;
    /** @type {?} */
    PageScrollInstance.prototype.startTime;
    /** @type {?} */
    PageScrollInstance.prototype.endTime;
    /** @type {?} */
    PageScrollInstance.prototype.executionDuration;
    /** @type {?} */
    PageScrollInstance.prototype.interruptListenersAttached;
    /** @type {?} */
    PageScrollInstance.prototype.timer;
}
/**
 * An Interface a listener should implement to be notified about possible interrupt events
 * that happened due to user interaction while a scroll animation takes place.
 *
 * The PageScrollService provides an implementation to a PageScrollInstance to be notified
 * about scroll animation interrupts and stop related animations.
 * @record
 */
export function InterruptReporter() { }
if (false) {
    /**
     * @param {?} event
     * @param {?} pageScrollInstance
     * @return {?}
     */
    InterruptReporter.prototype.report = function (event, pageScrollInstance) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1zY3JvbGwtaW5zdGFuY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGFnZS1zY3JvbGwtY29yZS8iLCJzb3VyY2VzIjpbImxpYi9wYWdlLXNjcm9sbC1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVNBLHVDQXVDQzs7Ozs7O0lBbkNDLHFDQUFtQjs7Ozs7OztJQU9uQix5Q0FBK0I7Ozs7OztJQU0vQix3Q0FBZ0M7Ozs7OztJQU1oQyxrQ0FBZTs7Ozs7SUFLZixpREFBNkM7O0lBRTdDLHNDQUFtQjs7SUFDbkIsOENBQTRCOztJQUM1QixxQ0FBa0I7O0lBQ2xCLHlDQUFzQjs7SUFDdEIsNERBQTBDOztJQUMxQyw0Q0FBMkI7O0lBQzNCLDBDQUF5Qjs7SUFDekIsMENBQXdCOztJQUN4Qix3Q0FBMEI7Ozs7O0FBTTVCOzs7O0lBZ0NFOzs7O09BSUc7SUFDSCw0QkFBWSxpQkFBb0M7Ozs7O1FBdkJ6Qyx3QkFBbUIsR0FBRyxDQUFDLENBQUM7O1FBWXhCLCtCQUEwQixHQUFHLEtBQUssQ0FBQzs7O1FBSW5DLFVBQUssR0FBUSxJQUFJLENBQUM7UUFRdkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsSUFBSSxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNoRixpQkFBaUIsQ0FBQyxXQUFXLEdBQUc7Z0JBQzlCLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxlQUFlO2dCQUMxQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDL0IsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVO2FBQzNDLENBQUM7WUFDRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0lBQzdDLENBQUM7Ozs7Ozs7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LElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUE7WUFDbEUsSUFBSSxjQUFjLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDL0Msd0ZBQXdGO2dCQUV4RixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqRjtZQUVELE9BQU8sbUJBQWEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUEsQ0FBQztTQUNuRjtRQUVELE9BQU8sbUJBQWEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBQSxDQUFDO0lBQzFELENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUExUEQsSUEwUEM7Ozs7Ozs7SUF4UEMsK0NBQTRDOzs7OztJQUU1QywrQ0FBbUM7Ozs7O0lBSW5DLCtDQUE4RDs7Ozs7SUFNOUQsaURBQStCOztJQUUvQixrREFBb0M7O0lBRXBDLDhDQUFnQzs7SUFFaEMsdUNBQXlCOztJQUV6QixxQ0FBdUI7O0lBRXZCLCtDQUFpQzs7SUFFakMsd0RBQTBDOztJQUkxQyxtQ0FBeUI7Ozs7Ozs7Ozs7QUFxTzNCLHVDQUVDOzs7Ozs7O0lBREMsOEVBQW1FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYWdlU2Nyb2xsQ29uZmlnIH0gZnJvbSAnLi90eXBlcy9wYWdlLXNjcm9sbC5jb25maWcnO1xuaW1wb3J0IHsgUGFnZVNjcm9sbFRhcmdldCB9IGZyb20gJy4vdHlwZXMvcGFnZS1zY3JvbGwtdGFyZ2V0JztcbmltcG9ydCB7IFBhZ2VTY3JvbGxWaWV3cyB9IGZyb20gJy4vdHlwZXMvcGFnZS1zY3JvbGwtdmlldyc7XG5pbXBvcnQgeyBFYXNpbmdMb2dpYyB9IGZyb20gJy4vdHlwZXMvZWFzaW5nLWxvZ2ljJztcblxuLyoqXG4gKiBBbiBJbnRlcmZhY2Ugc3BlY2lmeWluZyB0aGUgcG9zc2libGUgb3B0aW9ucyB0byBiZSBwYXNzZWQgaW50byB0aGUgbmV3SW5zdGFuY2UoKSBmYWN0b3J5IG1ldGhvZFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VTY3JvbGxPcHRpb25zIGV4dGVuZHMgUGFnZVNjcm9sbENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgZG9jdW1lbnQgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGFwcFxuICAgKi9cbiAgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIC8qKlxuICAgKiBBIHNwZWNpZmljYXRpb24gb2YgdGhlIERPTSBlbGVtZW50IHRvIHNjcm9sbCB0by4gRWl0aGVyIGEgc3RyaW5nIHJlZmVycmluZyB0byBhblxuICAgKiBlbGVtZW50IHVzaW5nIGEgdmFsaWQgY3NzIHNlbGVjdG9yIChgI3RhcmdldGAsIGAuY2xhc3NgLCBgZGl2LmNsYXNzYCkgb3IgYSBIVE1MRWxlbWVudFxuICAgKiB0aGF0IGlzIGF0dGFjaGVkIHRvIHRoZSBkb2N1bWVudCdzIERPTSB0cmVlLlxuICAgKi9cbiAgc2Nyb2xsVGFyZ2V0OiBQYWdlU2Nyb2xsVGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBIVE1MRWxlbWVudHMgb3IgdGhlIGJvZHkgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIG1hbmlwdWxhdGVkIHdoaWxlIHBlcmZvcm1pbmdcbiAgICogdGhlIHNjcm9sbCBhbmltYXRpb24uXG4gICAqL1xuICBzY3JvbGxWaWV3cz86IFBhZ2VTY3JvbGxWaWV3c1tdO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHNwZWVkIHRvIGJlIHVzZWQgZm9yIHRoZSBzY3JvbGwgYW5pbWF0aW9uLiBPbmx5IHRha2VuXG4gICAqIGludG8gYWNjb3VudCBvZiBubyBkdXJhdGlvbiBpcyBwcm92aWRlZFxuICAgKi9cbiAgc3BlZWQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBzY3JvbGwgYW5pbWF0aW9uIHN0b3BzXG4gICAqL1xuICBzY3JvbGxGaW5pc2hMaXN0ZW5lcj86IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcblxuICBuYW1lc3BhY2U/OiBzdHJpbmc7XG4gIHZlcnRpY2FsU2Nyb2xsaW5nPzogYm9vbGVhbjtcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIHNjcm9sbE9mZnNldD86IG51bWJlcjtcbiAgYWR2YW5jZWRJbmxpbmVPZmZzZXRDYWxjdWxhdGlvbj86IGJvb2xlYW47XG4gIGludGVycnVwdEV2ZW50cz86IHN0cmluZ1tdO1xuICBpbnRlcnJ1cHRLZXlzPzogc3RyaW5nW107XG4gIGludGVycnVwdGlibGU/OiBib29sZWFuO1xuICBlYXNpbmdMb2dpYz86IEVhc2luZ0xvZ2ljO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzY3JvbGxpbmcgYWN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlU2Nyb2xsSW5zdGFuY2Uge1xuXG4gIHB1YmxpYyBwYWdlU2Nyb2xsT3B0aW9uczogUGFnZVNjcm9sbE9wdGlvbnM7XG5cbiAgcHJpdmF0ZSBpc0lubGluZVNjcm9sbGluZzogYm9vbGVhbjtcblxuICAvKiBUaGUgbGlzdGVuZXIgdGhhdCB0aGlzIHNjcm9sbCBpbnN0YW5jZSBhdHRhY2hlcyB0byB0aGUgYm9keSB0byBsaXN0ZW4gZm9yIGludGVycnVwdCBldmVudHNcbiAgV2UncmUga2VlcGluZyBhIHJlZmVyZW5jZSB0byBpdCBzbyB3ZSBjYW4gcHJvcGVybHkgcmVtb3ZlIGl0IHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlcyAqL1xuICBwcml2YXRlIGludGVycnVwdExpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgc2V0L21hbmlwdWxhdGVkIGlmIHRoZSBzY3JvbGwgYW5pbWF0aW9uIHN0YXJ0c1xuICAgKi9cbiAgLyogVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHNjcm9sbFRvcCBvciBzY3JvbGxMZWZ0IHBvc2l0aW9uIHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMgKi9cbiAgcHVibGljIHN0YXJ0U2Nyb2xsUG9zaXRpb24gPSAwO1xuICAvKiBUaGUgdGFyZ2V0IHZhbHVlIG9mIHRoZSBzY3JvbGxUb3Agb3Igc2Nyb2xsTGVmdCBwb3NpdGlvbiBmb3IgdGhlIGFuaW1hdGlvbiAoYWthIFwidGhlIGZpbmFsIGRlc3RpbmF0aW9uXCIpICovXG4gIHB1YmxpYyB0YXJnZXRTY3JvbGxQb3NpdGlvbjogbnVtYmVyO1xuICAvKiBEaWZmZXJlbmNlIGJldHdlZW4gc3RhcnRTY3JvbGxQb3NpdGlvbiBhbmQgdGFyZ2V0U2Nyb2xsUG9zaXRpb24uIFByZS1jYWxjdWxhdGVkIHRvIG1pbmltaXplIGNvbXB1dGF0aW9ucyBkdXJpbmcgYW5pbWF0aW9uICovXG4gIHB1YmxpYyBkaXN0YW5jZVRvU2Nyb2xsOiBudW1iZXI7XG4gIC8qIFRoZSB0aW1lc3RhbXAgd2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0cy9nb3Qgc3RhcnRlZCAqL1xuICBwdWJsaWMgc3RhcnRUaW1lOiBudW1iZXI7XG4gIC8qIFRoZSBlc3RpbWF0ZSBlbmQgdGltZSBvZiB0aGUgYW5pbWF0aW9uLCBjYWxjdWxhdGVkIGJ5IHN0YXJ0VGltZSArIGR1cmF0aW9uICovXG4gIHB1YmxpYyBlbmRUaW1lOiBudW1iZXI7XG4gIC8qIFRoZSBkdXJhdGlvbiBhIHN0YXJ0ZWQgYW5pbWF0aW9uIHRha2VzLiBUaGlzIG1heSBtYXRjaCB0aGUgX2R1cmF0aW9uIG9yIGJlIGFkanVzdGVkIGR1ZSB0byB0aGUgX3NwZWVkIG9wdGlvbiAqL1xuICBwdWJsaWMgZXhlY3V0aW9uRHVyYXRpb246IG51bWJlcjtcbiAgLyogV2hldGhlciBhbiBpbnRlcnJ1cHQgbGlzdGVuZXIgaXMgYXR0YWNoZWQgdG8gdGhlIGJvZHkgb3Igbm90ICovXG4gIHB1YmxpYyBpbnRlcnJ1cHRMaXN0ZW5lcnNBdHRhY2hlZCA9IGZhbHNlO1xuXG4gIC8qIFJlZmVyZW5jZXMgdG8gdGhlIHRpbWVyIGluc3RhbmNlIHRoYXQgaXMgdXNlZCB0byBwZXJmb3JtIHRoZSBzY3JvbGwgYW5pbWF0aW9uIHRvIGJlXG4gICBhYmxlIHRvIGNsZWFyIGl0IG9uIGFuaW1hdGlvbiBlbmQqL1xuICBwdWJsaWMgdGltZXI6IGFueSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgY29uc3RydWN0b3IsIHJlcXVpcmVzIHRoZSBwcm9wZXJ0aWVzIGFzc3VtZWQgdG8gYmUgdGhlIGJhcmUgbWluaW11bS5cbiAgICogVXNlIHRoZSBmYWN0b3J5IG1ldGhvZHMgdG8gY3JlYXRlIGluc3RhbmNlczpcbiAgICogICAgICB7QGxpbmsgUGFnZVNjcm9sbFNlcnZpY2UjY3JlYXRlfVxuICAgKi9cbiAgY29uc3RydWN0b3IocGFnZVNjcm9sbE9wdGlvbnM6IFBhZ2VTY3JvbGxPcHRpb25zKSB7XG4gICAgaWYgKCFwYWdlU2Nyb2xsT3B0aW9ucy5zY3JvbGxWaWV3cyB8fCBwYWdlU2Nyb2xsT3B0aW9ucy5zY3JvbGxWaWV3cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFZpZXdzID0gW1xuICAgICAgICBwYWdlU2Nyb2xsT3B0aW9ucy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmJvZHksXG4gICAgICAgIHBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSxcbiAgICAgIF07XG4gICAgICB0aGlzLmlzSW5saW5lU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNJbmxpbmVTY3JvbGxpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMucGFnZVNjcm9sbE9wdGlvbnMgPSBwYWdlU2Nyb2xsT3B0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGdldFNjcm9sbGluZ1RhcmdldFBvc2l0aW9uKHBhZ2VTY3JvbGxPcHRpb25zOiBQYWdlU2Nyb2xsT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQpOiB7IHRvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIgfSB7XG4gICAgY29uc3QgYm9keSA9IHBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmJvZHk7XG4gICAgY29uc3QgZG9jRWwgPSBwYWdlU2Nyb2xsT3B0aW9ucy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBjb25zdCB3aW5kb3dQYWdlWU9mZnNldDogbnVtYmVyID0gcGFnZVNjcm9sbE9wdGlvbnMuZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiZcbiAgICAgIHBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmRlZmF1bHRWaWV3LnBhZ2VZT2Zmc2V0IHx8IHVuZGVmaW5lZDtcbiAgICBjb25zdCB3aW5kb3dQYWdlWE9mZnNldDogbnVtYmVyID0gcGFnZVNjcm9sbE9wdGlvbnMuZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiZcbiAgICAgIHBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmRlZmF1bHRWaWV3LnBhZ2VYT2Zmc2V0IHx8IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvd1BhZ2VZT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbFRvcCB8fCBib2R5LnNjcm9sbFRvcDtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93UGFnZVhPZmZzZXQgfHwgZG9jRWwuc2Nyb2xsTGVmdCB8fCBib2R5LnNjcm9sbExlZnQ7XG5cbiAgICBjb25zdCBjbGllbnRUb3AgPSBkb2NFbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gZG9jRWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcblxuICAgIGlmIChzY3JvbGxUYXJnZXRFbGVtZW50ID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVGFyZ2V0RWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgLy8gTm8gZWxlbWVudCBmb3VuZCwgc28gcmV0dXJuIHRoZSBjdXJyZW50IHBvc2l0aW9uIHRvIG5vdCBjYXVzZSBhbnkgY2hhbmdlIGluIHNjcm9sbCBwb3NpdGlvblxuICAgICAgcmV0dXJuIHt0b3A6IHNjcm9sbFRvcCwgbGVmdDogc2Nyb2xsTGVmdH07XG4gICAgfVxuICAgIGNvbnN0IGJveCA9IHNjcm9sbFRhcmdldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCB0b3AgPSBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wO1xuICAgIGNvbnN0IGxlZnQgPSBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0O1xuXG4gICAgcmV0dXJuIHt0b3A6IE1hdGgucm91bmQodG9wKSwgbGVmdDogTWF0aC5yb3VuZChsZWZ0KX07XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBnZXRJbmxpbmVTY3JvbGxpbmdUYXJnZXRQb3NpdGlvbihwYWdlU2Nyb2xsT3B0aW9uczogUGFnZVNjcm9sbE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogeyB0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyIH0ge1xuICAgIGNvbnN0IHBvc2l0aW9uID0ge3RvcDogc2Nyb2xsVGFyZ2V0RWxlbWVudC5vZmZzZXRUb3AsIGxlZnQ6IHNjcm9sbFRhcmdldEVsZW1lbnQub2Zmc2V0TGVmdH07XG4gICAgaWYgKHBhZ2VTY3JvbGxPcHRpb25zLmFkdmFuY2VkSW5saW5lT2Zmc2V0Q2FsY3VsYXRpb24gJiYgcGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsVmlld3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBhY2N1bXVsYXRlZFBhcmVudHNQb3MgPSB7dG9wOiAwLCBsZWZ0OiAwfTtcbiAgICAgIC8vIG5vdCBuYW1lZCB3aW5kb3cgdG8gbWFrZSBzdXJlIHdlJ3JlIG5vdCBnZXR0aW5nIHRoZSBnbG9iYWwgd2luZG93IHZhcmlhYmxlIGJ5IGFjY2lkZW50XG4gICAgICBjb25zdCB0aGVXaW5kb3cgPSBzY3JvbGxUYXJnZXRFbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICBsZXQgcGFyZW50Rm91bmQgPSBmYWxzZTtcblxuICAgICAgLy8gU3RhcnQgcGFyZW50IGlzIHRoZSBpbW1lZGlhdGUgcGFyZW50XG4gICAgICBsZXQgcGFyZW50ID0gc2Nyb2xsVGFyZ2V0RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXG4gICAgICAvLyBJdGVyYXRlIHVwd2FyZHMgYWxsIHBhcmVudHNcbiAgICAgIHdoaWxlICghcGFyZW50Rm91bmQgJiYgcGFyZW50ICE9PSB1bmRlZmluZWQgJiYgcGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGVXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLmdldFByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJykgPT09ICdyZWxhdGl2ZScpIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFBhcmVudHNQb3MudG9wICs9IHBhcmVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgYWNjdW11bGF0ZWRQYXJlbnRzUG9zLmxlZnQgKz0gcGFyZW50Lm9mZnNldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTmV4dCBpdGVyYXRpb25cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHBhcmVudEZvdW5kID0gcGFyZW50ID09PSBwYWdlU2Nyb2xsT3B0aW9ucy5zY3JvbGxWaWV3c1swXTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRGb3VuZCkge1xuICAgICAgICAvLyBPbmx5IHVzZSB0aGUgcmVzdWx0cyBpZiB3ZSBmb3VuZCB0aGUgcGFyZW50LCBvdGhlcndpc2Ugd2UgYWNjdW11bGF0ZWQgdG9vIG11Y2ggYW55d2F5XG4gICAgICAgIHBvc2l0aW9uLnRvcCArPSBhY2N1bXVsYXRlZFBhcmVudHNQb3MudG9wO1xuICAgICAgICBwb3NpdGlvbi5sZWZ0ICs9IGFjY3VtdWxhdGVkUGFyZW50c1Bvcy5sZWZ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogVE9ETyBVbmNvbW1lbnRcbiAgICAgICAgaWYgKFBhZ2VTY3JvbGxDb25maWcuX2xvZ0xldmVsID49IDIgfHwgKFBhZ2VTY3JvbGxDb25maWcuX2xvZ0xldmVsID49IDEgJiYgaXNEZXZNb2RlKCkpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gZmluZCBuZXN0ZWQgc2Nyb2xsaW5nIHRhcmdldHMgcGFyZW50IScpO1xuICAgICAgICB9Ki9cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBwdWJsaWMgZ2V0U2Nyb2xsUHJvcGVydHlWYWx1ZShzY3JvbGxpbmdWaWV3OiBhbnkpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5wYWdlU2Nyb2xsT3B0aW9ucy52ZXJ0aWNhbFNjcm9sbGluZykge1xuICAgICAgcmV0dXJuIHNjcm9sbGluZ1ZpZXcuc2Nyb2xsTGVmdDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Nyb2xsaW5nVmlldy5zY3JvbGxUb3A7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdCB0aGUgZXhhY3QgbG9jYXRpb24gb2YgdGhlIHNjcm9sbFRhcmdldCBlbGVtZW50LlxuICAgKlxuICAgKiBFeHRyYWN0IHRoZSBzY3JvbGxUYXJnZXQgSFRNTEVsZW1lbnQgZnJvbSB0aGUgZ2l2ZW4gUGFnZVNjcm9sbFRhcmdldCBvYmplY3QuIFRoZSBsYXR0ZXIgb25lIG1heSBiZVxuICAgKiBhIHN0cmluZyBsaWtlIFwiI2hlYWRpbmcyXCIsIHRoZW4gdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBET00gZWxlbWVudCBmb3IgdGhhdCBpZC5cbiAgICpcbiAgICovXG4gIHB1YmxpYyBleHRyYWN0U2Nyb2xsVGFyZ2V0UG9zaXRpb24oKTogeyB0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyIH0ge1xuICAgIGNvbnN0IHNjcm9sbFRhcmdldEVsZW1lbnQgPSB0aGlzLmdldFNjcm9sbFRhcmdldEVsZW1lbnQoKTtcblxuICAgIGlmIChzY3JvbGxUYXJnZXRFbGVtZW50ID09PSBudWxsIHx8IHNjcm9sbFRhcmdldEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gU2Nyb2xsIHRhcmdldCBub3QgZm91bmRcbiAgICAgIHJldHVybiB7dG9wOiBOYU4sIGxlZnQ6IE5hTn07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNJbmxpbmVTY3JvbGxpbmcpIHtcbiAgICAgIHJldHVybiBQYWdlU2Nyb2xsSW5zdGFuY2UuZ2V0SW5saW5lU2Nyb2xsaW5nVGFyZ2V0UG9zaXRpb24odGhpcy5wYWdlU2Nyb2xsT3B0aW9ucywgc2Nyb2xsVGFyZ2V0RWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFBhZ2VTY3JvbGxJbnN0YW5jZS5nZXRTY3JvbGxpbmdUYXJnZXRQb3NpdGlvbih0aGlzLnBhZ2VTY3JvbGxPcHRpb25zLCBzY3JvbGxUYXJnZXRFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHRvcCBvZmZzZXQgb2YgdGhlIHNjcm9sbCBhbmltYXRpb24uXG4gICAqIFRoaXMgYXV0b21hdGljYWxseSB0YWtlcyB0aGUgb2Zmc2V0IGxvY2F0aW9uIG9mIHRoZSBzY3JvbGxpbmcgY29udGFpbmVyL3Njcm9sbGluZyB2aWV3XG4gICAqIGludG8gYWNjb3VudCAoZm9yIG5lc3RlZC9pbmxpbmUgc2Nyb2xsaW5nKS5cbiAgICovXG4gIHB1YmxpYyBnZXRDdXJyZW50T2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsT2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIFwic2Nyb2xsVG9wXCIgb3IgXCJzY3JvbGxMZWZ0XCIgcHJvcGVydHkgZm9yIGFsbCBzY3JvbGxWaWV3cyB0byB0aGUgcHJvdmlkZWQgdmFsdWVcbiAgICogQHJldHVybiB0cnVlIGlmIGF0IGxlYXN0IGZvciBvbmUgU2Nyb2xsVG9wU291cmNlIHRoZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdCB2YWx1ZSBjb3VsZCBiZSBzZXQgYW5kIGl0IGtlcHQgdGhlIG5ldyB2YWx1ZS5cbiAgICogICAgICAgICAgZmFsc2UgaWYgaXQgZmFpbGVkIGZvciBhbGwgU2Nyb2xsVmlld3MsIG1lYW5pbmcgdGhhdCB3ZSBzaG91bGQgc3RvcCB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgIChwcm9iYWJseSBiZWNhdXNlIHdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIHNjcm9sbGluZyByZWdpb24pXG4gICAqL1xuICBwdWJsaWMgc2V0U2Nyb2xsUG9zaXRpb24ocG9zaXRpb246IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIC8vIFNldCB0aGUgbmV3IHNjcm9sbFRvcC9zY3JvbGxMZWZ0IHRvIGFsbCBzY3JvbGxWaWV3cyBlbGVtZW50c1xuICAgIHJldHVybiB0aGlzLnBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFZpZXdzLnJlZHVjZSgob25lQWxyZWFkeVdvcmtlZDogYW55LCBzY3JvbGxpbmdWaWV3OiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0U2Nyb2xsUHJvcGVydHlWYWx1ZSA9IHRoaXMuZ2V0U2Nyb2xsUHJvcGVydHlWYWx1ZShzY3JvbGxpbmdWaWV3KTtcbiAgICAgIGlmIChzY3JvbGxpbmdWaWV3ICYmIHN0YXJ0U2Nyb2xsUHJvcGVydHlWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXJ0U2Nyb2xsUHJvcGVydHlWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBzY3JvbGxEaXN0YW5jZSA9IE1hdGguYWJzKHN0YXJ0U2Nyb2xsUHJvcGVydHlWYWx1ZSAtIHBvc2l0aW9uKTtcblxuICAgICAgICAvLyBUaGUgbW92ZW1lbnQgd2UgbmVlZCB0byBwZXJmb3JtIGlzIGxlc3MgdGhhbiAycHhcbiAgICAgICAgLy8gVGhpcyB3ZSBjb25zaWRlciBhIHNtYWxsIG1vdmVtZW50IHdoaWNoIHNvbWUgYnJvd3NlciBtYXkgbm90IHBlcmZvcm0gd2hlblxuICAgICAgICAvLyBjaGFuZ2luZyB0aGUgc2Nyb2xsVG9wL3Njcm9sbExlZnQgcHJvcGVydHlcbiAgICAgICAgLy8gVGh1cyBpbiB0aGlzIGNhc2VzIHdlIGRvIG5vdCBzdG9wIHRoZSBzY3JvbGwgYW5pbWF0aW9uLCBhbHRob3VnaCBzZXR0aW5nIHRoZVxuICAgICAgICAvLyBzY3JvbGxUb3Avc2Nyb2xsTGVmdCB2YWx1ZSBcImZhaWxzXCJcbiAgICAgICAgY29uc3QgaXNTbWFsbE1vdmVtZW50ID0gc2Nyb2xsRGlzdGFuY2UgPCB0aGlzLnBhZ2VTY3JvbGxPcHRpb25zLl9taW5TY3JvbGxEaXN0YW5jZTtcblxuICAgICAgICBpZiAoIXRoaXMucGFnZVNjcm9sbE9wdGlvbnMudmVydGljYWxTY3JvbGxpbmcpIHtcbiAgICAgICAgICBzY3JvbGxpbmdWaWV3LnNjcm9sbExlZnQgPSBwb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY3JvbGxpbmdWaWV3LnNjcm9sbFRvcCA9IHBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIHRydWUgaWYgc2V0dGluZyB0aGUgbmV3IHNjcm9sbFRvcC9zY3JvbGxMZWZ0IHZhbHVlIHdvcmtlZFxuICAgICAgICAvLyBXZSBjb25zaWRlciB0aGF0IGl0IHdvcmtlZCBpZiB0aGUgbmV3IHNjcm9sbFRvcC9zY3JvbGxMZWZ0IHZhbHVlIGlzIGNsb3NlciB0byB0aGVcbiAgICAgICAgLy8gZGVzaXJlZCBzY3JvbGxUb3Avc2Nyb2xsTGVmdCB0aGFuIGJlZm9yZSAoaXQgbWlnaHQgbm90IGJlIGV4YWN0bHkgdGhlIHZhbHVlIHdlXG4gICAgICAgIC8vIHNldCBkdWUgdG8gZHBpIG9yIHJvdW5kaW5nIGlycmVndWxhcml0aWVzKVxuICAgICAgICBpZiAoaXNTbWFsbE1vdmVtZW50IHx8IHNjcm9sbERpc3RhbmNlID4gTWF0aC5hYnModGhpcy5nZXRTY3JvbGxQcm9wZXJ0eVZhbHVlKHNjcm9sbGluZ1ZpZXcpIC0gcG9zaXRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uZUFscmVhZHlXb3JrZWQ7XG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgZmlyaW5nIGEgYW5pbWF0aW9uIGZpbmlzaCBldmVudFxuICAgKiBAcGFyYW0gdmFsdWUgV2hldGhlciB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkIGF0IHRoZSB0YXJnZXQgKHRydWUpIG9yIGdvdCBpbnRlcnJ1cHRlZCAoZmFsc2UpXG4gICAqL1xuICBwdWJsaWMgZmlyZUV2ZW50KHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsRmluaXNoTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsRmluaXNoTGlzdGVuZXIuZW1pdCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCB0aGUgaW50ZXJydXB0IGxpc3RlbmVycyB0byB0aGUgUGFnZVNjcm9sbEluc3RhbmNlIGJvZHkuIFRoZSBnaXZlbiBpbnRlcnJ1cHRSZXBvcnRlclxuICAgKiB3aWxsIGJlIGNhbGxlZCBpZiBhbnkgb2YgdGhlIGF0dGFjaGVkIGV2ZW50cyBpcyBmaXJlZC5cbiAgICpcbiAgICogUG9zc2libHkgYXR0YWNoZWQgaW50ZXJydXB0TGlzdGVuZXJzIGFyZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgYm9keSBiZWZvcmUgdGhlIG5ldyBvbmUgd2lsbCBiZSBhdHRhY2hlZC5cbiAgICovXG4gIHB1YmxpYyBhdHRhY2hJbnRlcnJ1cHRMaXN0ZW5lcnMoaW50ZXJydXB0UmVwb3J0ZXI6IEludGVycnVwdFJlcG9ydGVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW50ZXJydXB0TGlzdGVuZXJzQXR0YWNoZWQpIHtcbiAgICAgIC8vIERldGFjaCBwb3NzaWJseSBleGlzdGluZyBsaXN0ZW5lcnMgZmlyc3RcbiAgICAgIHRoaXMuZGV0YWNoSW50ZXJydXB0TGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIHRoaXMuaW50ZXJydXB0TGlzdGVuZXIgPSAoZXZlbnQ6IEV2ZW50KTogdm9pZCA9PiB7XG4gICAgICBpbnRlcnJ1cHRSZXBvcnRlci5yZXBvcnQoZXZlbnQsIHRoaXMpO1xuICAgIH07XG4gICAgdGhpcy5wYWdlU2Nyb2xsT3B0aW9ucy5pbnRlcnJ1cHRFdmVudHMuZm9yRWFjaChcbiAgICAgIChldmVudDogc3RyaW5nKSA9PiB0aGlzLnBhZ2VTY3JvbGxPcHRpb25zLmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5pbnRlcnJ1cHRMaXN0ZW5lcilcbiAgICApO1xuICAgIHRoaXMuaW50ZXJydXB0TGlzdGVuZXJzQXR0YWNoZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgYm9keSBhbmQgc3RvcCBsaXN0ZW5pbmcgZm9yIGV2ZW50cyB0aGF0IG1pZ2h0IGJlIHRyZWF0ZWQgYXMgXCJhbmltYXRpb25cbiAgICogaW50ZXJydXB0XCIgZXZlbnRzLlxuICAgKi9cbiAgcHVibGljIGRldGFjaEludGVycnVwdExpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLnBhZ2VTY3JvbGxPcHRpb25zLmludGVycnVwdEV2ZW50cy5mb3JFYWNoKFxuICAgICAgKGV2ZW50OiBzdHJpbmcpID0+IHRoaXMucGFnZVNjcm9sbE9wdGlvbnMuZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmludGVycnVwdExpc3RlbmVyKVxuICAgICk7XG4gICAgdGhpcy5pbnRlcnJ1cHRMaXN0ZW5lcnNBdHRhY2hlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTY3JvbGxUYXJnZXRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICBpZiAodHlwZW9mIHRoaXMucGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsVGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSA8c3RyaW5nPnRoaXMucGFnZVNjcm9sbE9wdGlvbnMuc2Nyb2xsVGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldFNlbGVjdG9yLm1hdGNoKC9eI1teXFxzXSskL2cpICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEl0J3MgYW4gaWQgc2VsZWN0b3IgYW5kIGEgdmFsaWQgaWQsIGFzIGl0IGRvZXMgbm90IGNvbnRhaW4gYW55IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnNcblxuICAgICAgICByZXR1cm4gdGhpcy5wYWdlU2Nyb2xsT3B0aW9ucy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRTZWxlY3Rvci5zdWJzdHIoMSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gPEhUTUxFbGVtZW50PnRoaXMucGFnZVNjcm9sbE9wdGlvbnMuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxIVE1MRWxlbWVudD50aGlzLnBhZ2VTY3JvbGxPcHRpb25zLnNjcm9sbFRhcmdldDtcbiAgfVxufVxuXG4vKipcbiAqIEFuIEludGVyZmFjZSBhIGxpc3RlbmVyIHNob3VsZCBpbXBsZW1lbnQgdG8gYmUgbm90aWZpZWQgYWJvdXQgcG9zc2libGUgaW50ZXJydXB0IGV2ZW50c1xuICogdGhhdCBoYXBwZW5lZCBkdWUgdG8gdXNlciBpbnRlcmFjdGlvbiB3aGlsZSBhIHNjcm9sbCBhbmltYXRpb24gdGFrZXMgcGxhY2UuXG4gKlxuICogVGhlIFBhZ2VTY3JvbGxTZXJ2aWNlIHByb3ZpZGVzIGFuIGltcGxlbWVudGF0aW9uIHRvIGEgUGFnZVNjcm9sbEluc3RhbmNlIHRvIGJlIG5vdGlmaWVkXG4gKiBhYm91dCBzY3JvbGwgYW5pbWF0aW9uIGludGVycnVwdHMgYW5kIHN0b3AgcmVsYXRlZCBhbmltYXRpb25zLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEludGVycnVwdFJlcG9ydGVyIHtcbiAgcmVwb3J0KGV2ZW50OiBFdmVudCwgcGFnZVNjcm9sbEluc3RhbmNlOiBQYWdlU2Nyb2xsSW5zdGFuY2UpOiB2b2lkO1xufVxuIl19