(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/common'), require('ngx-page-scroll-core')) :
    typeof define === 'function' && define.amd ? define('ngx-page-scroll', ['exports', '@angular/core', '@angular/router', '@angular/common', 'ngx-page-scroll-core'], factory) :
    (factory((global['ngx-page-scroll'] = {}),global.ng.core,global.ng.router,global.ng.common,global.ngxPageScrollCore));
}(this, (function (exports,core,router,common,ngxPageScrollCore) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPageScrollDirective = /** @class */ (function () {
        function NgxPageScrollDirective(pageScrollService, router$$1, document) {
            this.pageScrollService = pageScrollService;
            this.router = router$$1;
            this.pageScrollAdjustHash = false;
            this.pageScrollFinish = new core.EventEmitter();
            this.document = ( /** @type {?} */(document));
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxPageScrollDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // Some inputs changed, reset the pageScrollInstance
                this.pageScrollInstance = undefined;
            };
        /**
         * @return {?}
         */
        NgxPageScrollDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.pageScrollInstance) {
                    this.pageScrollService.stop(this.pageScrollInstance);
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxPageScrollDirective.prototype.generatePageScrollInstance = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {
                    /** @type {?} */
                    var options = {
                        document: this.document,
                        scrollTarget: this.pageScrollTarget || this.href,
                    };
                    if (this.pageScroll) {
                        options.namespace = this.pageScroll;
                    }
                    if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {
                        options.verticalScrolling = !this.pageScrollHorizontal;
                    }
                    if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {
                        options.scrollOffset = this.pageScrollOffset;
                    }
                    if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {
                        options.interruptible = this.pageScrollInterruptible;
                    }
                    if (this.pageScrollEasing) {
                        options.easingLogic = this.pageScrollEasing;
                    }
                    if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {
                        options.duration = this.pageScrollDuration;
                    }
                    if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {
                        options.speed = this.pageScrollSpeed;
                    }
                    if (this.pageScrollFinish) {
                        options.scrollFinishListener = this.pageScrollFinish;
                    }
                    this.pageScrollInstance = this.pageScrollService.create(options);
                }
                return this.pageScrollInstance;
            };
        /**
         * @private
         * @return {?}
         */
        NgxPageScrollDirective.prototype.pushRouterState = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'
                    && (( /** @type {?} */(this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(0, 1) === '#') {
                    // "Navigate" to the current route again and this time set the fragment/hash
                    this.router.navigate([], {
                        fragment: (( /** @type {?} */(this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(1),
                        preserveQueryParams: true,
                    });
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxPageScrollDirective.prototype.scroll = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var pageScrollInstance = this.generatePageScrollInstance();
                this.pushRouterState();
                this.pageScrollService.start(pageScrollInstance);
            };
        /**
         * @param {?} clickEvent
         * @return {?}
         */
        NgxPageScrollDirective.prototype.handleClick = /**
         * @param {?} clickEvent
         * @return {?}
         */
            function (clickEvent) {
                var _this = this;
                if (this.routerLink && this.router !== null && this.router !== undefined) {
                    /** @type {?} */
                    var urlTree = void 0;
                    if (typeof this.routerLink === 'string') {
                        urlTree = this.router.parseUrl(this.routerLink);
                    }
                    else {
                        urlTree = this.router.createUrlTree(this.routerLink);
                    }
                    if (!this.router.isActive(urlTree, true)) {
                        // We need to navigate their first.
                        // Navigation is handled by the routerLink directive
                        // so we only need to listen for route change
                        /** @type {?} */
                        var subscription_1 = ( /** @type {?} */(this.router.events.subscribe(( /**
                         * @param {?} routerEvent
                         * @return {?}
                         */function (routerEvent) {
                            if (routerEvent instanceof router.NavigationEnd) {
                                subscription_1.unsubscribe();
                                // use a timeout to start scrolling as soon as the stack is cleared
                                setTimeout(( /**
                                 * @return {?}
                                 */function () {
                                    _this.scroll();
                                }), 0);
                            }
                            else if (routerEvent instanceof router.NavigationError || routerEvent instanceof router.NavigationCancel) {
                                subscription_1.unsubscribe();
                            }
                        }))));
                        return false; // to preventDefault()
                    }
                }
                this.scroll();
                return false; // to preventDefault()
            };
        NgxPageScrollDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[pageScroll]',
                        host: {
                            '(click)': 'handleClick($event)',
                        },
                    },] }
        ];
        /** @nocollapse */
        NgxPageScrollDirective.ctorParameters = function () {
            return [
                { type: ngxPageScrollCore.PageScrollService },
                { type: router.Router, decorators: [{ type: core.Optional }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        NgxPageScrollDirective.propDecorators = {
            routerLink: [{ type: core.Input }],
            href: [{ type: core.Input }],
            pageScrollTarget: [{ type: core.Input }],
            pageScrollHorizontal: [{ type: core.Input }],
            pageScrollOffset: [{ type: core.Input }],
            pageScrollDuration: [{ type: core.Input }],
            pageScrollSpeed: [{ type: core.Input }],
            pageScrollEasing: [{ type: core.Input }],
            pageScrollInterruptible: [{ type: core.Input }],
            pageScrollAdjustHash: [{ type: core.Input }],
            pageScroll: [{ type: core.Input }],
            pageScrollFinish: [{ type: core.Output }]
        };
        return NgxPageScrollDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPageScrollModule = /** @class */ (function () {
        function NgxPageScrollModule() {
        }
        NgxPageScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NgxPageScrollDirective,
                        ],
                        imports: [
                            ngxPageScrollCore.NgxPageScrollCoreModule,
                        ],
                        exports: [
                            NgxPageScrollDirective,
                        ],
                    },] }
        ];
        return NgxPageScrollModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxPageScrollModule = NgxPageScrollModule;
    exports.NgxPageScrollDirective = NgxPageScrollDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-page-scroll.umd.js.map